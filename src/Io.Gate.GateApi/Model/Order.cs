/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Spot order details
    /// </summary>
    [DataContract]
    public partial class Order :  IEquatable<Order>, IValidatableObject
    {
        /// <summary>
        /// Order status  - &#x60;open&#x60;: to be filled - &#x60;closed&#x60;: filled - &#x60;cancelled&#x60;: cancelled
        /// </summary>
        /// <value>Order status  - &#x60;open&#x60;: to be filled - &#x60;closed&#x60;: filled - &#x60;cancelled&#x60;: cancelled</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Open for value: open
            /// </summary>
            [EnumMember(Value = "open")]
            Open = 1,

            /// <summary>
            /// Enum Closed for value: closed
            /// </summary>
            [EnumMember(Value = "closed")]
            Closed = 2,

            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 3

        }

        /// <summary>
        /// Order status  - &#x60;open&#x60;: to be filled - &#x60;closed&#x60;: filled - &#x60;cancelled&#x60;: cancelled
        /// </summary>
        /// <value>Order status  - &#x60;open&#x60;: to be filled - &#x60;closed&#x60;: filled - &#x60;cancelled&#x60;: cancelled</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Order Type   - limit : Limit Order - market : Market Order
        /// </summary>
        /// <value>Order Type   - limit : Limit Order - market : Market Order</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Limit for value: limit
            /// </summary>
            [EnumMember(Value = "limit")]
            Limit = 1,

            /// <summary>
            /// Enum Market for value: market
            /// </summary>
            [EnumMember(Value = "market")]
            Market = 2

        }

        /// <summary>
        /// Order Type   - limit : Limit Order - market : Market Order
        /// </summary>
        /// <value>Order Type   - limit : Limit Order - market : Market Order</value>
        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Account type. spot - use spot account; margin - use margin account; cross_margin - use cross margin account. Portfolio margin account must set to &#x60;cross-margin&#x60; 
        /// </summary>
        /// <value>Account type. spot - use spot account; margin - use margin account; cross_margin - use cross margin account. Portfolio margin account must set to &#x60;cross-margin&#x60; </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccountEnum
        {
            /// <summary>
            /// Enum Spot for value: spot
            /// </summary>
            [EnumMember(Value = "spot")]
            Spot = 1,

            /// <summary>
            /// Enum Margin for value: margin
            /// </summary>
            [EnumMember(Value = "margin")]
            Margin = 2,

            /// <summary>
            /// Enum Crossmargin for value: cross_margin
            /// </summary>
            [EnumMember(Value = "cross_margin")]
            Crossmargin = 3

        }

        /// <summary>
        /// Account type. spot - use spot account; margin - use margin account; cross_margin - use cross margin account. Portfolio margin account must set to &#x60;cross-margin&#x60; 
        /// </summary>
        /// <value>Account type. spot - use spot account; margin - use margin account; cross_margin - use cross margin account. Portfolio margin account must set to &#x60;cross-margin&#x60; </value>
        [DataMember(Name="account")]
        public AccountEnum? Account { get; set; }
        /// <summary>
        /// Order side
        /// </summary>
        /// <value>Order side</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SideEnum
        {
            /// <summary>
            /// Enum Buy for value: buy
            /// </summary>
            [EnumMember(Value = "buy")]
            Buy = 1,

            /// <summary>
            /// Enum Sell for value: sell
            /// </summary>
            [EnumMember(Value = "sell")]
            Sell = 2

        }

        /// <summary>
        /// Order side
        /// </summary>
        /// <value>Order side</value>
        [DataMember(Name="side")]
        public SideEnum Side { get; set; }
        /// <summary>
        /// Time in force  - gtc: GoodTillCancelled - ioc: ImmediateOrCancelled, taker only - poc: PendingOrCancelled, makes a post-only order that always enjoys a maker fee - fok: FillOrKill, fill either completely or none Only &#x60;ioc&#x60; and &#x60;fok&#x60; are supported when &#x60;type&#x60;&#x3D;&#x60;market&#x60;
        /// </summary>
        /// <value>Time in force  - gtc: GoodTillCancelled - ioc: ImmediateOrCancelled, taker only - poc: PendingOrCancelled, makes a post-only order that always enjoys a maker fee - fok: FillOrKill, fill either completely or none Only &#x60;ioc&#x60; and &#x60;fok&#x60; are supported when &#x60;type&#x60;&#x3D;&#x60;market&#x60;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TimeInForceEnum
        {
            /// <summary>
            /// Enum Gtc for value: gtc
            /// </summary>
            [EnumMember(Value = "gtc")]
            Gtc = 1,

            /// <summary>
            /// Enum Ioc for value: ioc
            /// </summary>
            [EnumMember(Value = "ioc")]
            Ioc = 2,

            /// <summary>
            /// Enum Poc for value: poc
            /// </summary>
            [EnumMember(Value = "poc")]
            Poc = 3,

            /// <summary>
            /// Enum Fok for value: fok
            /// </summary>
            [EnumMember(Value = "fok")]
            Fok = 4

        }

        /// <summary>
        /// Time in force  - gtc: GoodTillCancelled - ioc: ImmediateOrCancelled, taker only - poc: PendingOrCancelled, makes a post-only order that always enjoys a maker fee - fok: FillOrKill, fill either completely or none Only &#x60;ioc&#x60; and &#x60;fok&#x60; are supported when &#x60;type&#x60;&#x3D;&#x60;market&#x60;
        /// </summary>
        /// <value>Time in force  - gtc: GoodTillCancelled - ioc: ImmediateOrCancelled, taker only - poc: PendingOrCancelled, makes a post-only order that always enjoys a maker fee - fok: FillOrKill, fill either completely or none Only &#x60;ioc&#x60; and &#x60;fok&#x60; are supported when &#x60;type&#x60;&#x3D;&#x60;market&#x60;</value>
        [DataMember(Name="time_in_force")]
        public TimeInForceEnum? TimeInForce { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Order() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="text">User defined information. If not empty, must follow the rules below:  1. prefixed with &#x60;t-&#x60; 2. no longer than 28 bytes without &#x60;t-&#x60; prefix 3. can only include 0-9, A-Z, a-z, underscore(_), hyphen(-) or dot(.) .</param>
        /// <param name="currencyPair">Currency pair (required).</param>
        /// <param name="type">Order Type   - limit : Limit Order - market : Market Order (default to TypeEnum.Limit).</param>
        /// <param name="account">Account type. spot - use spot account; margin - use margin account; cross_margin - use cross margin account. Portfolio margin account must set to &#x60;cross-margin&#x60;  (default to AccountEnum.Spot).</param>
        /// <param name="side">Order side (required).</param>
        /// <param name="amount">When &#x60;type&#x60; is limit, it refers to base currency.  For instance, &#x60;BTC_USDT&#x60; means &#x60;BTC&#x60;  When &#x60;type&#x60; is &#x60;market&#x60;, it refers to different currency according to &#x60;side&#x60;  - &#x60;side&#x60; : &#x60;buy&#x60; means quote currency, &#x60;BTC_USDT&#x60; means &#x60;USDT&#x60; - &#x60;side&#x60; : &#x60;sell&#x60; means base currencyï¼Œ&#x60;BTC_USDT&#x60; means &#x60;BTC&#x60;  (required).</param>
        /// <param name="price">Price can&#39;t be empty when &#x60;type&#x60;&#x3D; &#x60;limit&#x60;.</param>
        /// <param name="timeInForce">Time in force  - gtc: GoodTillCancelled - ioc: ImmediateOrCancelled, taker only - poc: PendingOrCancelled, makes a post-only order that always enjoys a maker fee - fok: FillOrKill, fill either completely or none Only &#x60;ioc&#x60; and &#x60;fok&#x60; are supported when &#x60;type&#x60;&#x3D;&#x60;market&#x60; (default to TimeInForceEnum.Gtc).</param>
        /// <param name="iceberg">Amount to display for the iceberg order. Null or 0 for normal orders. Set to -1 to hide the order completely.</param>
        /// <param name="autoBorrow">Used in margin or cross margin trading to allow automatic loan of insufficient amount if balance is not enough..</param>
        /// <param name="autoRepay">Enable or disable automatic repayment for automatic borrow loan generated by cross margin order. Default is disabled. Note that:  1. This field is only effective for cross margin orders. Margin account does not support setting auto repayment for orders. 2. &#x60;auto_borrow&#x60; and &#x60;auto_repay&#x60; cannot be both set to true in one order..</param>
        public Order(string text = default(string), string currencyPair = default(string), TypeEnum? type = TypeEnum.Limit, AccountEnum? account = AccountEnum.Spot, SideEnum side = default(SideEnum), string amount = default(string), string price = default(string), TimeInForceEnum? timeInForce = TimeInForceEnum.Gtc, string iceberg = default(string), bool autoBorrow = default(bool), bool autoRepay = default(bool))
        {
            // to ensure "currencyPair" is required (not null)
            this.CurrencyPair = currencyPair ?? throw new ArgumentNullException("currencyPair", "currencyPair is a required property for Order and cannot be null");
            this.Side = side;
            // to ensure "amount" is required (not null)
            this.Amount = amount ?? throw new ArgumentNullException("amount", "amount is a required property for Order and cannot be null");
            this.Text = text;
            this.Type = type;
            this.Account = account;
            this.Price = price;
            this.TimeInForce = timeInForce;
            this.Iceberg = iceberg;
            this.AutoBorrow = autoBorrow;
            this.AutoRepay = autoRepay;
        }

        /// <summary>
        /// Order ID
        /// </summary>
        /// <value>Order ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// User defined information. If not empty, must follow the rules below:  1. prefixed with &#x60;t-&#x60; 2. no longer than 28 bytes without &#x60;t-&#x60; prefix 3. can only include 0-9, A-Z, a-z, underscore(_), hyphen(-) or dot(.) 
        /// </summary>
        /// <value>User defined information. If not empty, must follow the rules below:  1. prefixed with &#x60;t-&#x60; 2. no longer than 28 bytes without &#x60;t-&#x60; prefix 3. can only include 0-9, A-Z, a-z, underscore(_), hyphen(-) or dot(.) </value>
        [DataMember(Name="text")]
        public string Text { get; set; }

        /// <summary>
        /// Creation time of order
        /// </summary>
        /// <value>Creation time of order</value>
        [DataMember(Name="create_time", EmitDefaultValue=false)]
        public string CreateTime { get; private set; }

        /// <summary>
        /// Last modification time of order
        /// </summary>
        /// <value>Last modification time of order</value>
        [DataMember(Name="update_time", EmitDefaultValue=false)]
        public string UpdateTime { get; private set; }

        /// <summary>
        /// Creation time of order (in milliseconds)
        /// </summary>
        /// <value>Creation time of order (in milliseconds)</value>
        [DataMember(Name="create_time_ms", EmitDefaultValue=false)]
        public long CreateTimeMs { get; private set; }

        /// <summary>
        /// Last modification time of order (in milliseconds)
        /// </summary>
        /// <value>Last modification time of order (in milliseconds)</value>
        [DataMember(Name="update_time_ms", EmitDefaultValue=false)]
        public long UpdateTimeMs { get; private set; }

        /// <summary>
        /// Currency pair
        /// </summary>
        /// <value>Currency pair</value>
        [DataMember(Name="currency_pair")]
        public string CurrencyPair { get; set; }

        /// <summary>
        /// When &#x60;type&#x60; is limit, it refers to base currency.  For instance, &#x60;BTC_USDT&#x60; means &#x60;BTC&#x60;  When &#x60;type&#x60; is &#x60;market&#x60;, it refers to different currency according to &#x60;side&#x60;  - &#x60;side&#x60; : &#x60;buy&#x60; means quote currency, &#x60;BTC_USDT&#x60; means &#x60;USDT&#x60; - &#x60;side&#x60; : &#x60;sell&#x60; means base currencyï¼Œ&#x60;BTC_USDT&#x60; means &#x60;BTC&#x60; 
        /// </summary>
        /// <value>When &#x60;type&#x60; is limit, it refers to base currency.  For instance, &#x60;BTC_USDT&#x60; means &#x60;BTC&#x60;  When &#x60;type&#x60; is &#x60;market&#x60;, it refers to different currency according to &#x60;side&#x60;  - &#x60;side&#x60; : &#x60;buy&#x60; means quote currency, &#x60;BTC_USDT&#x60; means &#x60;USDT&#x60; - &#x60;side&#x60; : &#x60;sell&#x60; means base currencyï¼Œ&#x60;BTC_USDT&#x60; means &#x60;BTC&#x60; </value>
        [DataMember(Name="amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Price can&#39;t be empty when &#x60;type&#x60;&#x3D; &#x60;limit&#x60;
        /// </summary>
        /// <value>Price can&#39;t be empty when &#x60;type&#x60;&#x3D; &#x60;limit&#x60;</value>
        [DataMember(Name="price")]
        public string Price { get; set; }

        /// <summary>
        /// Amount to display for the iceberg order. Null or 0 for normal orders. Set to -1 to hide the order completely
        /// </summary>
        /// <value>Amount to display for the iceberg order. Null or 0 for normal orders. Set to -1 to hide the order completely</value>
        [DataMember(Name="iceberg")]
        public string Iceberg { get; set; }

        /// <summary>
        /// Used in margin or cross margin trading to allow automatic loan of insufficient amount if balance is not enough.
        /// </summary>
        /// <value>Used in margin or cross margin trading to allow automatic loan of insufficient amount if balance is not enough.</value>
        [DataMember(Name="auto_borrow")]
        public bool AutoBorrow { get; set; }

        /// <summary>
        /// Enable or disable automatic repayment for automatic borrow loan generated by cross margin order. Default is disabled. Note that:  1. This field is only effective for cross margin orders. Margin account does not support setting auto repayment for orders. 2. &#x60;auto_borrow&#x60; and &#x60;auto_repay&#x60; cannot be both set to true in one order.
        /// </summary>
        /// <value>Enable or disable automatic repayment for automatic borrow loan generated by cross margin order. Default is disabled. Note that:  1. This field is only effective for cross margin orders. Margin account does not support setting auto repayment for orders. 2. &#x60;auto_borrow&#x60; and &#x60;auto_repay&#x60; cannot be both set to true in one order.</value>
        [DataMember(Name="auto_repay")]
        public bool AutoRepay { get; set; }

        /// <summary>
        /// Amount left to fill
        /// </summary>
        /// <value>Amount left to fill</value>
        [DataMember(Name="left", EmitDefaultValue=false)]
        public string Left { get; private set; }

        /// <summary>
        /// Total filled in quote currency. Deprecated in favor of &#x60;filled_total&#x60;
        /// </summary>
        /// <value>Total filled in quote currency. Deprecated in favor of &#x60;filled_total&#x60;</value>
        [DataMember(Name="fill_price", EmitDefaultValue=false)]
        public string FillPrice { get; private set; }

        /// <summary>
        /// Total filled in quote currency
        /// </summary>
        /// <value>Total filled in quote currency</value>
        [DataMember(Name="filled_total", EmitDefaultValue=false)]
        public string FilledTotal { get; private set; }

        /// <summary>
        /// Fee deducted
        /// </summary>
        /// <value>Fee deducted</value>
        [DataMember(Name="fee", EmitDefaultValue=false)]
        public string Fee { get; private set; }

        /// <summary>
        /// Fee currency unit
        /// </summary>
        /// <value>Fee currency unit</value>
        [DataMember(Name="fee_currency", EmitDefaultValue=false)]
        public string FeeCurrency { get; private set; }

        /// <summary>
        /// Points used to deduct fee
        /// </summary>
        /// <value>Points used to deduct fee</value>
        [DataMember(Name="point_fee", EmitDefaultValue=false)]
        public string PointFee { get; private set; }

        /// <summary>
        /// GT used to deduct fee
        /// </summary>
        /// <value>GT used to deduct fee</value>
        [DataMember(Name="gt_fee", EmitDefaultValue=false)]
        public string GtFee { get; private set; }

        /// <summary>
        /// GT used to deduct maker fee
        /// </summary>
        /// <value>GT used to deduct maker fee</value>
        [DataMember(Name="gt_maker_fee", EmitDefaultValue=false)]
        public string GtMakerFee { get; private set; }

        /// <summary>
        /// GT used to deduct taker fee
        /// </summary>
        /// <value>GT used to deduct taker fee</value>
        [DataMember(Name="gt_taker_fee", EmitDefaultValue=false)]
        public string GtTakerFee { get; private set; }

        /// <summary>
        /// Whether GT fee discount is used
        /// </summary>
        /// <value>Whether GT fee discount is used</value>
        [DataMember(Name="gt_discount", EmitDefaultValue=false)]
        public bool GtDiscount { get; private set; }

        /// <summary>
        /// Rebated fee
        /// </summary>
        /// <value>Rebated fee</value>
        [DataMember(Name="rebated_fee", EmitDefaultValue=false)]
        public string RebatedFee { get; private set; }

        /// <summary>
        /// Rebated fee currency unit
        /// </summary>
        /// <value>Rebated fee currency unit</value>
        [DataMember(Name="rebated_fee_currency", EmitDefaultValue=false)]
        public string RebatedFeeCurrency { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("  CreateTimeMs: ").Append(CreateTimeMs).Append("\n");
            sb.Append("  UpdateTimeMs: ").Append(UpdateTimeMs).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CurrencyPair: ").Append(CurrencyPair).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  TimeInForce: ").Append(TimeInForce).Append("\n");
            sb.Append("  Iceberg: ").Append(Iceberg).Append("\n");
            sb.Append("  AutoBorrow: ").Append(AutoBorrow).Append("\n");
            sb.Append("  AutoRepay: ").Append(AutoRepay).Append("\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("  FillPrice: ").Append(FillPrice).Append("\n");
            sb.Append("  FilledTotal: ").Append(FilledTotal).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  FeeCurrency: ").Append(FeeCurrency).Append("\n");
            sb.Append("  PointFee: ").Append(PointFee).Append("\n");
            sb.Append("  GtFee: ").Append(GtFee).Append("\n");
            sb.Append("  GtMakerFee: ").Append(GtMakerFee).Append("\n");
            sb.Append("  GtTakerFee: ").Append(GtTakerFee).Append("\n");
            sb.Append("  GtDiscount: ").Append(GtDiscount).Append("\n");
            sb.Append("  RebatedFee: ").Append(RebatedFee).Append("\n");
            sb.Append("  RebatedFeeCurrency: ").Append(RebatedFeeCurrency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Order);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="input">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.CreateTime == input.CreateTime ||
                    (this.CreateTime != null &&
                    this.CreateTime.Equals(input.CreateTime))
                ) && 
                (
                    this.UpdateTime == input.UpdateTime ||
                    (this.UpdateTime != null &&
                    this.UpdateTime.Equals(input.UpdateTime))
                ) && 
                (
                    this.CreateTimeMs == input.CreateTimeMs ||
                    this.CreateTimeMs.Equals(input.CreateTimeMs)
                ) && 
                (
                    this.UpdateTimeMs == input.UpdateTimeMs ||
                    this.UpdateTimeMs.Equals(input.UpdateTimeMs)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.CurrencyPair == input.CurrencyPair ||
                    (this.CurrencyPair != null &&
                    this.CurrencyPair.Equals(input.CurrencyPair))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Account == input.Account ||
                    this.Account.Equals(input.Account)
                ) && 
                (
                    this.Side == input.Side ||
                    this.Side.Equals(input.Side)
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.TimeInForce == input.TimeInForce ||
                    this.TimeInForce.Equals(input.TimeInForce)
                ) && 
                (
                    this.Iceberg == input.Iceberg ||
                    (this.Iceberg != null &&
                    this.Iceberg.Equals(input.Iceberg))
                ) && 
                (
                    this.AutoBorrow == input.AutoBorrow ||
                    this.AutoBorrow.Equals(input.AutoBorrow)
                ) && 
                (
                    this.AutoRepay == input.AutoRepay ||
                    this.AutoRepay.Equals(input.AutoRepay)
                ) && 
                (
                    this.Left == input.Left ||
                    (this.Left != null &&
                    this.Left.Equals(input.Left))
                ) && 
                (
                    this.FillPrice == input.FillPrice ||
                    (this.FillPrice != null &&
                    this.FillPrice.Equals(input.FillPrice))
                ) && 
                (
                    this.FilledTotal == input.FilledTotal ||
                    (this.FilledTotal != null &&
                    this.FilledTotal.Equals(input.FilledTotal))
                ) && 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && 
                (
                    this.FeeCurrency == input.FeeCurrency ||
                    (this.FeeCurrency != null &&
                    this.FeeCurrency.Equals(input.FeeCurrency))
                ) && 
                (
                    this.PointFee == input.PointFee ||
                    (this.PointFee != null &&
                    this.PointFee.Equals(input.PointFee))
                ) && 
                (
                    this.GtFee == input.GtFee ||
                    (this.GtFee != null &&
                    this.GtFee.Equals(input.GtFee))
                ) && 
                (
                    this.GtMakerFee == input.GtMakerFee ||
                    (this.GtMakerFee != null &&
                    this.GtMakerFee.Equals(input.GtMakerFee))
                ) && 
                (
                    this.GtTakerFee == input.GtTakerFee ||
                    (this.GtTakerFee != null &&
                    this.GtTakerFee.Equals(input.GtTakerFee))
                ) && 
                (
                    this.GtDiscount == input.GtDiscount ||
                    this.GtDiscount.Equals(input.GtDiscount)
                ) && 
                (
                    this.RebatedFee == input.RebatedFee ||
                    (this.RebatedFee != null &&
                    this.RebatedFee.Equals(input.RebatedFee))
                ) && 
                (
                    this.RebatedFeeCurrency == input.RebatedFeeCurrency ||
                    (this.RebatedFeeCurrency != null &&
                    this.RebatedFeeCurrency.Equals(input.RebatedFeeCurrency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.CreateTime != null)
                    hashCode = hashCode * 59 + this.CreateTime.GetHashCode();
                if (this.UpdateTime != null)
                    hashCode = hashCode * 59 + this.UpdateTime.GetHashCode();
                hashCode = hashCode * 59 + this.CreateTimeMs.GetHashCode();
                hashCode = hashCode * 59 + this.UpdateTimeMs.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.CurrencyPair != null)
                    hashCode = hashCode * 59 + this.CurrencyPair.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.Account.GetHashCode();
                hashCode = hashCode * 59 + this.Side.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                hashCode = hashCode * 59 + this.TimeInForce.GetHashCode();
                if (this.Iceberg != null)
                    hashCode = hashCode * 59 + this.Iceberg.GetHashCode();
                hashCode = hashCode * 59 + this.AutoBorrow.GetHashCode();
                hashCode = hashCode * 59 + this.AutoRepay.GetHashCode();
                if (this.Left != null)
                    hashCode = hashCode * 59 + this.Left.GetHashCode();
                if (this.FillPrice != null)
                    hashCode = hashCode * 59 + this.FillPrice.GetHashCode();
                if (this.FilledTotal != null)
                    hashCode = hashCode * 59 + this.FilledTotal.GetHashCode();
                if (this.Fee != null)
                    hashCode = hashCode * 59 + this.Fee.GetHashCode();
                if (this.FeeCurrency != null)
                    hashCode = hashCode * 59 + this.FeeCurrency.GetHashCode();
                if (this.PointFee != null)
                    hashCode = hashCode * 59 + this.PointFee.GetHashCode();
                if (this.GtFee != null)
                    hashCode = hashCode * 59 + this.GtFee.GetHashCode();
                if (this.GtMakerFee != null)
                    hashCode = hashCode * 59 + this.GtMakerFee.GetHashCode();
                if (this.GtTakerFee != null)
                    hashCode = hashCode * 59 + this.GtTakerFee.GetHashCode();
                hashCode = hashCode * 59 + this.GtDiscount.GetHashCode();
                if (this.RebatedFee != null)
                    hashCode = hashCode * 59 + this.RebatedFee.GetHashCode();
                if (this.RebatedFeeCurrency != null)
                    hashCode = hashCode * 59 + this.RebatedFeeCurrency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
