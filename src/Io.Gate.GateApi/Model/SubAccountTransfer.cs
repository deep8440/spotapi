/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// SubAccountTransfer
    /// </summary>
    [DataContract]
    public partial class SubAccountTransfer :  IEquatable<SubAccountTransfer>, IValidatableObject
    {
        /// <summary>
        /// Transfer direction. to - transfer into sub account; from - transfer out from sub account
        /// </summary>
        /// <value>Transfer direction. to - transfer into sub account; from - transfer out from sub account</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DirectionEnum
        {
            /// <summary>
            /// Enum To for value: to
            /// </summary>
            [EnumMember(Value = "to")]
            To = 1,

            /// <summary>
            /// Enum From for value: from
            /// </summary>
            [EnumMember(Value = "from")]
            From = 2

        }

        /// <summary>
        /// Transfer direction. to - transfer into sub account; from - transfer out from sub account
        /// </summary>
        /// <value>Transfer direction. to - transfer into sub account; from - transfer out from sub account</value>
        [DataMember(Name="direction")]
        public DirectionEnum Direction { get; set; }
        /// <summary>
        /// Target sub user&#39;s account. &#x60;spot&#x60; - spot account, &#x60;futures&#x60; - perpetual contract account, &#x60;cross_margin&#x60; - cross margin account
        /// </summary>
        /// <value>Target sub user&#39;s account. &#x60;spot&#x60; - spot account, &#x60;futures&#x60; - perpetual contract account, &#x60;cross_margin&#x60; - cross margin account</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubAccountTypeEnum
        {
            /// <summary>
            /// Enum Spot for value: spot
            /// </summary>
            [EnumMember(Value = "spot")]
            Spot = 1,

            /// <summary>
            /// Enum Futures for value: futures
            /// </summary>
            [EnumMember(Value = "futures")]
            Futures = 2,

            /// <summary>
            /// Enum Crossmargin for value: cross_margin
            /// </summary>
            [EnumMember(Value = "cross_margin")]
            Crossmargin = 3

        }

        /// <summary>
        /// Target sub user&#39;s account. &#x60;spot&#x60; - spot account, &#x60;futures&#x60; - perpetual contract account, &#x60;cross_margin&#x60; - cross margin account
        /// </summary>
        /// <value>Target sub user&#39;s account. &#x60;spot&#x60; - spot account, &#x60;futures&#x60; - perpetual contract account, &#x60;cross_margin&#x60; - cross margin account</value>
        [DataMember(Name="sub_account_type")]
        public SubAccountTypeEnum? SubAccountType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubAccountTransfer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubAccountTransfer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubAccountTransfer" /> class.
        /// </summary>
        /// <param name="currency">Transfer currency name (required).</param>
        /// <param name="subAccount">Sub account user ID (required).</param>
        /// <param name="direction">Transfer direction. to - transfer into sub account; from - transfer out from sub account (required).</param>
        /// <param name="amount">Transfer amount (required).</param>
        /// <param name="subAccountType">Target sub user&#39;s account. &#x60;spot&#x60; - spot account, &#x60;futures&#x60; - perpetual contract account, &#x60;cross_margin&#x60; - cross margin account (default to SubAccountTypeEnum.Spot).</param>
        public SubAccountTransfer(string currency = default(string), string subAccount = default(string), DirectionEnum direction = default(DirectionEnum), string amount = default(string), SubAccountTypeEnum? subAccountType = SubAccountTypeEnum.Spot)
        {
            // to ensure "currency" is required (not null)
            this.Currency = currency ?? throw new ArgumentNullException("currency", "currency is a required property for SubAccountTransfer and cannot be null");
            // to ensure "subAccount" is required (not null)
            this.SubAccount = subAccount ?? throw new ArgumentNullException("subAccount", "subAccount is a required property for SubAccountTransfer and cannot be null");
            this.Direction = direction;
            // to ensure "amount" is required (not null)
            this.Amount = amount ?? throw new ArgumentNullException("amount", "amount is a required property for SubAccountTransfer and cannot be null");
            this.SubAccountType = subAccountType;
        }

        /// <summary>
        /// Transfer currency name
        /// </summary>
        /// <value>Transfer currency name</value>
        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Sub account user ID
        /// </summary>
        /// <value>Sub account user ID</value>
        [DataMember(Name="sub_account")]
        public string SubAccount { get; set; }

        /// <summary>
        /// Transfer amount
        /// </summary>
        /// <value>Transfer amount</value>
        [DataMember(Name="amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Main account user ID
        /// </summary>
        /// <value>Main account user ID</value>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public string Uid { get; private set; }

        /// <summary>
        /// Transfer timestamp
        /// </summary>
        /// <value>Transfer timestamp</value>
        [DataMember(Name="timest", EmitDefaultValue=false)]
        public string Timest { get; private set; }

        /// <summary>
        /// Where the operation is initiated from
        /// </summary>
        /// <value>Where the operation is initiated from</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubAccountTransfer {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  SubAccount: ").Append(SubAccount).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Timest: ").Append(Timest).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  SubAccountType: ").Append(SubAccountType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubAccountTransfer);
        }

        /// <summary>
        /// Returns true if SubAccountTransfer instances are equal
        /// </summary>
        /// <param name="input">Instance of SubAccountTransfer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubAccountTransfer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.SubAccount == input.SubAccount ||
                    (this.SubAccount != null &&
                    this.SubAccount.Equals(input.SubAccount))
                ) && 
                (
                    this.Direction == input.Direction ||
                    this.Direction.Equals(input.Direction)
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Uid == input.Uid ||
                    (this.Uid != null &&
                    this.Uid.Equals(input.Uid))
                ) && 
                (
                    this.Timest == input.Timest ||
                    (this.Timest != null &&
                    this.Timest.Equals(input.Timest))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.SubAccountType == input.SubAccountType ||
                    this.SubAccountType.Equals(input.SubAccountType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.SubAccount != null)
                    hashCode = hashCode * 59 + this.SubAccount.GetHashCode();
                hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Uid != null)
                    hashCode = hashCode * 59 + this.Uid.GetHashCode();
                if (this.Timest != null)
                    hashCode = hashCode * 59 + this.Timest.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                hashCode = hashCode * 59 + this.SubAccountType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
