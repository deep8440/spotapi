/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// SubAccountKey
    /// </summary>
    [DataContract]
    public partial class SubAccountKey :  IEquatable<SubAccountKey>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubAccountKey" /> class.
        /// </summary>
        /// <param name="name">API key name.</param>
        /// <param name="perms">perms.</param>
        /// <param name="ipWhitelist">ip white list (list will be removed if no value is passed).</param>
        public SubAccountKey(string name = default(string), List<ApiV4KeyPerm> perms = default(List<ApiV4KeyPerm>), List<string> ipWhitelist = default(List<string>))
        {
            this.Name = name;
            this.Perms = perms;
            this.IpWhitelist = ipWhitelist;
        }

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string UserId { get; private set; }

        /// <summary>
        /// API key name
        /// </summary>
        /// <value>API key name</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Perms
        /// </summary>
        [DataMember(Name="perms")]
        public List<ApiV4KeyPerm> Perms { get; set; }

        /// <summary>
        /// ip white list (list will be removed if no value is passed)
        /// </summary>
        /// <value>ip white list (list will be removed if no value is passed)</value>
        [DataMember(Name="ip_whitelist")]
        public List<string> IpWhitelist { get; set; }

        /// <summary>
        /// API Key
        /// </summary>
        /// <value>API Key</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; private set; }

        /// <summary>
        /// State 1 - normal 2 - locked 3 - frozen
        /// </summary>
        /// <value>State 1 - normal 2 - locked 3 - frozen</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public int State { get; private set; }

        /// <summary>
        /// Creation time
        /// </summary>
        /// <value>Creation time</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; private set; }

        /// <summary>
        /// Last update time
        /// </summary>
        /// <value>Last update time</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubAccountKey {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Perms: ").Append(Perms).Append("\n");
            sb.Append("  IpWhitelist: ").Append(IpWhitelist).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubAccountKey);
        }

        /// <summary>
        /// Returns true if SubAccountKey instances are equal
        /// </summary>
        /// <param name="input">Instance of SubAccountKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubAccountKey input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Perms == input.Perms ||
                    this.Perms != null &&
                    input.Perms != null &&
                    this.Perms.SequenceEqual(input.Perms)
                ) && 
                (
                    this.IpWhitelist == input.IpWhitelist ||
                    this.IpWhitelist != null &&
                    input.IpWhitelist != null &&
                    this.IpWhitelist.SequenceEqual(input.IpWhitelist)
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Perms != null)
                    hashCode = hashCode * 59 + this.Perms.GetHashCode();
                if (this.IpWhitelist != null)
                    hashCode = hashCode * 59 + this.IpWhitelist.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
