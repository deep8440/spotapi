/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Gate.GateApi.Client.OpenAPIDateConverter;

namespace Io.Gate.GateApi.Model
{
    /// <summary>
    /// Options position information
    /// </summary>
    [DataContract]
    public partial class OptionsPosition :  IEquatable<OptionsPosition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionsPosition" /> class.
        /// </summary>
        /// <param name="closeOrder">closeOrder.</param>
        public OptionsPosition(OptionsPositionCloseOrder closeOrder = default(OptionsPositionCloseOrder))
        {
            this.CloseOrder = closeOrder;
        }

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int User { get; private set; }

        /// <summary>
        /// Options contract name
        /// </summary>
        /// <value>Options contract name</value>
        [DataMember(Name="contract", EmitDefaultValue=false)]
        public string Contract { get; private set; }

        /// <summary>
        /// Position size (contract size)
        /// </summary>
        /// <value>Position size (contract size)</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public long Size { get; private set; }

        /// <summary>
        /// Entry size (quote currency)
        /// </summary>
        /// <value>Entry size (quote currency)</value>
        [DataMember(Name="entry_price", EmitDefaultValue=false)]
        public string EntryPrice { get; private set; }

        /// <summary>
        /// Current mark price (quote currency)
        /// </summary>
        /// <value>Current mark price (quote currency)</value>
        [DataMember(Name="mark_price", EmitDefaultValue=false)]
        public string MarkPrice { get; private set; }

        /// <summary>
        /// Realized PNL
        /// </summary>
        /// <value>Realized PNL</value>
        [DataMember(Name="realised_pnl", EmitDefaultValue=false)]
        public string RealisedPnl { get; private set; }

        /// <summary>
        /// Unrealized PNL
        /// </summary>
        /// <value>Unrealized PNL</value>
        [DataMember(Name="unrealised_pnl", EmitDefaultValue=false)]
        public string UnrealisedPnl { get; private set; }

        /// <summary>
        /// Current open orders
        /// </summary>
        /// <value>Current open orders</value>
        [DataMember(Name="pending_orders", EmitDefaultValue=false)]
        public int PendingOrders { get; private set; }

        /// <summary>
        /// Gets or Sets CloseOrder
        /// </summary>
        [DataMember(Name="close_order")]
        public OptionsPositionCloseOrder CloseOrder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OptionsPosition {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  EntryPrice: ").Append(EntryPrice).Append("\n");
            sb.Append("  MarkPrice: ").Append(MarkPrice).Append("\n");
            sb.Append("  RealisedPnl: ").Append(RealisedPnl).Append("\n");
            sb.Append("  UnrealisedPnl: ").Append(UnrealisedPnl).Append("\n");
            sb.Append("  PendingOrders: ").Append(PendingOrders).Append("\n");
            sb.Append("  CloseOrder: ").Append(CloseOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptionsPosition);
        }

        /// <summary>
        /// Returns true if OptionsPosition instances are equal
        /// </summary>
        /// <param name="input">Instance of OptionsPosition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptionsPosition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.User == input.User ||
                    this.User.Equals(input.User)
                ) && 
                (
                    this.Contract == input.Contract ||
                    (this.Contract != null &&
                    this.Contract.Equals(input.Contract))
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                ) && 
                (
                    this.EntryPrice == input.EntryPrice ||
                    (this.EntryPrice != null &&
                    this.EntryPrice.Equals(input.EntryPrice))
                ) && 
                (
                    this.MarkPrice == input.MarkPrice ||
                    (this.MarkPrice != null &&
                    this.MarkPrice.Equals(input.MarkPrice))
                ) && 
                (
                    this.RealisedPnl == input.RealisedPnl ||
                    (this.RealisedPnl != null &&
                    this.RealisedPnl.Equals(input.RealisedPnl))
                ) && 
                (
                    this.UnrealisedPnl == input.UnrealisedPnl ||
                    (this.UnrealisedPnl != null &&
                    this.UnrealisedPnl.Equals(input.UnrealisedPnl))
                ) && 
                (
                    this.PendingOrders == input.PendingOrders ||
                    this.PendingOrders.Equals(input.PendingOrders)
                ) && 
                (
                    this.CloseOrder == input.CloseOrder ||
                    (this.CloseOrder != null &&
                    this.CloseOrder.Equals(input.CloseOrder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Contract != null)
                    hashCode = hashCode * 59 + this.Contract.GetHashCode();
                hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.EntryPrice != null)
                    hashCode = hashCode * 59 + this.EntryPrice.GetHashCode();
                if (this.MarkPrice != null)
                    hashCode = hashCode * 59 + this.MarkPrice.GetHashCode();
                if (this.RealisedPnl != null)
                    hashCode = hashCode * 59 + this.RealisedPnl.GetHashCode();
                if (this.UnrealisedPnl != null)
                    hashCode = hashCode * 59 + this.UnrealisedPnl.GetHashCode();
                hashCode = hashCode * 59 + this.PendingOrders.GetHashCode();
                if (this.CloseOrder != null)
                    hashCode = hashCode * 59 + this.CloseOrder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
